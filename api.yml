scopes:
  -
    description: work with entities
    path: '/entities'
    authentication: |
      object level access requires 'view', 'create',
      'edit', 'delete', 'tagging' or 'view_meta'
      permissons on the respective collection. For example: merging entities A
      and B into C requires 'delete' on A's and B's collections as well as
      'create' on C's collection.
    endpoints:
      -
        description: find entities by various criteria
        path: ''
        params:
          - 
            name: id
            type: integer(s)
            description: find by id or uuid
          -
            name: name
            type: string
            description: find by (partial) name
          -
            name: except_kind_id
            type: integer(s)
            description: exclude results having these kind ids
          -
            name: collection_id
            type: integer
            description: only return entities with this collection id
          -
            name: kind_id
            type: integer
            description: only return entities with this kind id
          -
            name: dating
            type: kor date range
            description: |
              only return entities (partially) matching the given date range
          -
            name: tags
            type: string(s)
            description: only return entities having the given tags
          - 
            name: relation_name
            type: string
            description: |
              only return entities that can be related using the given relation
              name
          -
            name: file_name
            type: string
            description: |
              only return entities having a uploaded file with the given name,
              will only return media entities
          -
            name: file_type
            type: content type
            description: |
              only return entities having a uploaded file with the given content
              type, will only return media entities
          -
            name: datahash
            type: string
            description: |
              only return entities having a uploaded file matching the given
              SHA1 hash, will only return media entities
          -
            name: file_size
            type: file size
            description: |
              only return entities having a uploaded file with the given file
              size
          -
            name: created_after
            type: datedate
            description: only return entities created after the given time
          -
            name: created_before
            type: datedate
            description: only return entities created before the given time
          -
            name: updated_after
            type: datedate
            description: only return entities updated after the given time
          -
            name: updated_before
            type: datedate
            description: only return entities updated before the given time
          -
            name: created_by
            type: integer
            description: |
              only return entities created by the given user, expects the user
              id
          -
            name: updated_by
            type: integer
            description: |
              only return entities updated by the given user, expects the user
              id
          -
            name: isolated
            type: "true"
            description: |
              only return entities that are isolated, meaning not related to
              any other entities
          -
            name: invalid
            type: "true"
            description: |
              only return entities that have been previously flagged as invalid
              (typically by a import script)
          -
            name: user_group_id
            type: integer
            description: |
              only return entities that are within the given user group
          -
            name: authority_group_id
            type: integer
            description: |
              only return entities that are within the given admin group
          -
            name: terms
            type: elasticsearch query
            description: |
              only return entities matching the given elasticsearch query
          -
            name: dataset_<name>
            type: string
            description: |
              only return entities having a dataset value dataset_<name>
              (partially) matching the given string
          -
            name: property
            type: string
            description: |
              only return entities having a property (partially) matching the
              given string
          -
            name: related
            type: string
            description: |
              only return entities where a related entity's name matches the
              given string
          -
            name: sort
            type: string
            description: |
              sort the results according to the given criteria, allowed values:
              relevance, name, random
            default: name
          -
            name: related_per_page
            type: integer
            description: |
              the amount of related entities to include per primary result and
              per relation. This value is capped by the setting "maximum number
              of included objects per result"
            default: 1
          -
            name: related_relation_name
            type: string(s)
            description: |
              when including related entities, limit them by the relation name
              they are related by
          -
            name: related_kind_id
            type: integer(s)
            description: |
              when including related entities, limit them by their kind id

        result: a paginated result containing matching entities
      -
        description: show information about a single entity
        path: '/:id'
        params:
          - 
            name: id
            type: integer, uuid
            required: true
            description: the id or uuid of the entity to retrieve
          -
            name: include
            type: strings
            description: list of information aspects on the entity to include
            values:
              - 'technical (uuid, timestamps)'
              - 'synonyms'
              - 'datings'
              - 'dataset (custom fields)'
              - 'properties (special properties)'
              - 'relations (a count for each relation to non-media entities)'
              - 'media_relations (a count for each relation to media entities)'
              - 'related (all related entities up to related_per_page, entity index endpoint)'
              - 'gallery_data (primary and secondary entities as defined in the settings)'
              - 'kind (detailed kind information)'
              - 'collection (detailed collection information)'
              - 'user_groups (list of all user groups this entity is part of, requesting user only)'
              - 'groups (list of admin groups this entity is part of)'
              - 'degree (the degree of connectivity)'
              - 'users (detailed creator, updater information)'
              - 'fields (custom field types)'
              - 'generators (custom field generators)'
              - 'all (include everything)'
        result: the data for the requested entity
      -
        description: create a new entity
        path: ''
        method: 'post'
        params:
          -
            name: entity
            type: object
            required: true
            description: the information to create the entity from
            values:
              name: 'the name of the entity'
              display_name: |
                a distinguishing suffix in case the name is already taken by
                another entity
              no_name_statement: |
                one of unknown, not_available, empty_name, enter_name to
                indicate if a name will be supplied or why not
              comment: 'a arbitrary string'
              kind_id: the id of the kind to assign to the entity
              collection_id: the id of the collection to add the entity to
              subtype: 'a arbitrary string'
              medium_attributes: |
                medium kind only: a object with keys document and/or image and
                file upload values. When file data is sent via this attribute,
                the entire request has to be formatted as
                "application/x-www-form-urlencoded" (for historic reasons)
              datings_attributes: a list of objects with keys label, dating_string
              synonyms: 'a newline separated list'
              dataset: "a object with keys matching the kind's custom field names"
              properties: a list of objects with keys label and value
              user_group_name: the name of a user group to add the new entity to
              relation_name: the name of a relation to relate the new entity with
              target_entity_id: the id of another entity to relate the new entity to
              tag_list: strings, a list of tags to add to the entity
      -
        description: update a entity
        path: '/:id'
        method: 'patch, put'
        params:
          - 
            name: id
            type: integer
            required: true
            description: the id or uuid of the entity to retrieve
          -
            name: entity
            type: object
            required: true
            description: the information to update the entity with
            values:
              name: 'the name of the entity'
              display_name: |
                a distinguishing suffix in case the name is already taken by
                another entity
              no_name_statement: |
                one of unknown, not_available, empty_name, enter_name to
                indicate if a name will be supplied or why not
              comment: 'a arbitrary string'
              kind_id: the id of the kind to assign to the entity
              collection_id: the id of the collection to add the entity to
              subtype: 'a arbitrary string'
              medium_attributes: |
                medium kind only: a object with keys document and/or image and
                file upload values
              datings_attributes: |
                a list of objects with keys id, _destroy, label, dating_string
                and lock_version (set id for existing datings and _destroy to
                delete)
              synonyms: 'a newline separated list'
              dataset: "a object with keys matching the kind's custom field names"
              properties: a list of objects with keys label and value
              user_group_name: the name of a user group to add the new entity to
              relation_name: the name of a relation to relate the new entity with
              target_entity_id: the id of another entity to relate the new entity to
              tag_list: strings, a list of tags to set for the entity
              lock_version: see general api description

      -
        description: update a entity's tags
        path: '/:id/update_tags'
        method: 'patch'
        params:
          - 
            name: id
            type: integer
            required: true
            description: the id or uuid of the entity to retrieve
          -
            name: entity
            description: the entity information
            values:
              tags: strings, a list of tags to add to the entity
      -
        description: remove (soft-delete) a entity
        path: ':id'
        method: 'delete'
        params:
          - 
            name: id
            type: integer
            required: true
            description: the id of the entity to remove
      -
        description: merge two or more entities
        path: '/merge'
        method: 'post'
        params:
          - 
            name: id
            type: integer
            required: true
            description: the id of the entity to merge into
          -
            name: entitiy_ids
            type: integers
            required: true
            description: |
              the ids of the entities to be merged, only single kind allowed
          - name: entity
            type: object
            required: true
            description: the entity information
            values:
              name: 'the name of the entity'
              display_name: |
                a distinguishing suffix in case the name is already taken by
                another entity
              no_name_statement: |
                one of unknown, not_available, empty_name, enter_name to
                indicate if a name will be supplied or why not
              comment: 'a arbitrary string'
              kind_id: the id of the kind to assign to the entity
              collection_id: the id of the collection to add the entity to
              subtype: 'a arbitrary string'
              medium_attributes: |
                medium kind only: a object with keys document and/or image and
                file upload values
              datings_attributes: a list of objects with keys label, dating_string
              synonyms: 'a newline separated list'
              dataset: "a object with keys matching the kind's custom field names"
              properties: a list of objects with keys label and value
              user_group_name: the name of a user group to add the new entity to
              relation_name: the name of a relation to relate the new entity with
              target_entity_id: the id of another entity to relate the new entity to
              tag_list: strings, a list of tags to add to the entity
      -
        description: relate several entities to a single entity
        path: '/:id/mass_relate'
        method: 'post'
        params:
          - 
            name: id
            type: integer
            required: true
            description: the id of the entity to relate to
          -
            name: relation_name
            type: string
            required: true
            description: the relation name to relate the entities with
          -
            name: entitiy_ids
            type: integers
            required: true
            description: the ids of the entities to be related
      -
        description: remove (soft-delete) several entities at once
        path: '/mass_destroy'
        method: 'delete'
        params:
          -
            name: ids
            type: integers
            required: true
            description: the ids of the entities to be removed
      -
        description: check if entities exist
        path: '/existence'
        method: 'post'
        params:
          -
            name: ids
            type: integers
            required: true
            description: the ids of the entities to be checked
        result: |
          a object with a keys for each requested entity's id and values
          indicating the entity's existence (true, false)

  -
    description: work with media
    path: '/media'
    authentication: |
      object level access requires 'view' and/or
      'download_originals' on the respective collection.
    endpoints:
      -
        description: retrieve a medium's data blob in various formats
        path: '/:disposition/:style/:id_part_01/:id_part_02/:id_part_03/:attachment.:style_extension'
        params:
          - 
            name: disposition
            required: true
            type: string
            description: suggest download or inline display for images
            values:
              - inline (show the image inline or within a browser tab)
              - download (suggest to the browser to handle the data as a file download)
          -
            name: id_part_*,
            type: string
            required: true
            description: the 3-way split medium id, e.g. 3456789 -> 003/456/789
          -
            name: attachment
            type: string
            required: true
            description: the attachment to serve
            values:
              - image (for images)
              - document (for everything else)
          -
            name: style_extension
            type: string
            required: true
            description: the extension for the blob being retrieved (e.g. jpg, flv, mp4, docx etc.)
        result: a blob representing the requested medium data
      -
        description: transform a medium
        path: '/transform/:id/:transformation/:operation(.:format)'
        method: 'patch'
        params:
          - 
            name: id
            type: integer
            required: true
            description: the id of the medium to be transformed
          -
            name: transformation
            type: string
            required: true
            description: the class of operations to perform
            values:
              - image (currently the only possible value)
          -
            name: operation
            type: string
            required:  true
            description: the operation to perform
            values:
              - flip (mirror across vertical axis)
              - flop (mirror across horizontal axis)
              - rotate_cw (rotate 90° clock-wise)
              - rotate_ccw (rotate 90° counter-clock-wise)
              - rotate_180 (rotate 180°)


  -
    description: work with relationships
    path: '/relationships'
    authentication: |
      object level access requires 'view' and/or
      'update' on the respective collection.
    endpoints:
      -
        description: retrieve a list of relationships by various criteria
        path: ''
        params:
          - 
            name: from_entity_id
            type: integers
            description: return only relationships originating from these entities
          - 
            name: to_entity_id
            type: integers
            description: return only relationships ending at these entities
          - 
            name: relation_name
            type: strings
            description: return only relationships matching these names
          - 
            name: from_kind_id
            type: integers
            description: return only relationships originating from entities with these kinds
          - 
            name: to_kind_id
            type: integers
            description: return only relationships ending at entities with these kinds
          - 
            name: except_to_kind_id
            type: integers
            description: return only relationships not ending at entities with these kinds
        result: a paginated result containing matching relationships
      -
        description: show information about a single relationship
        path: '/:id'
        params:
          - 
            name: id
            type: integer
            required: true
            description: the id of the relationship to retrieve
          -
            name: include
            type: strings
            description: list of information aspects on the entity to include
            values:
              - 'to (detailed data for the target entity)'
              - "media_relations (detailed data for target entity's related media)"
              - 'properties (special properties)'
              - 'datings'
              - 'relationship (detailed data on the relation)'
              - 'technical (timestamps)'
              - 'all (include everything)'
      -
        description: create a new (two-way) relationship
        path: ''
        method: 'post'
        params:
          -
            name: relationship
            type: object
            required: true
            description: the information to create the relationship from
            values:
              from_id: the id for the originating entity
              to_id: the id for the target entity
              relation_id: the id for the relation to use
              relation_name: the name for the relation to use (alternative to relation_id)
              datings_attributes: a list of objects with keys label, dating_string
              properties: a list of objects with keys label and value
      -
        description: update a existing (two-way) relationship
        path: '/:id'
        method: 'put, patch'
        params:
          - 
            name: id
            type: integer
            required: true
            description: the id of the relationship to update
          -
            name: relationship
            type: object
            required: true
            description: the information to create the relationship from
            values:
              from_id: the id for the originating entity
              to_id: the id for the target entity
              relation_id: the id for the relation to use
              relation_name: the name for the relation to use (alternative to relation_id)
              datings_attributes: a list of objects with keys label, dating_string
              properties: a list of objects with keys label and value
              lock_version:
      -
        description: remove (soft-delete) a (two-way) relationship
        path: ':id'
        method: 'delete'
        params:
          - 
            name: id
            type: integer
            required: true
            description: the id of the relationship to remove

  -
    description: work with kinds
    path: '/kinds'
    authentication: |
      no object level restrictions, read access is public, write access requires
      special user permissions
    endpoints:
      -
        description: retrieve a list of kinds by various criteria
        path: ''
        params:
          - 
            name: only_active
            type: any
            description: |
              return only active (not abstract) kinds, the value given is
              irrelevant, the param's presence triggers the filter
          - 
            name: no_media
            description: |
              return only kinds which are not the medium kind, the value given
              is irrelevant, the param's presence triggers the filter
        result: a paginated result containing matching kinds
      -
        description: show information about a single kind
        path: '/:id'
        params:
          - 
            name: id
            type: integer
            required: true
            description: the id the kind to retrieve
          -
            name: include
            type: strings
            description: list of information aspects on the kind to include
            values:
              - 'technical (uuid, timestamps)'
              - 'settings (tagging, synonyms, name requirements and labels)'
              - 'fields (custom field definitions)'
              - 'generators (generator definitions)'
              - 'inheritance (parent kind(s))'
              - 'all (include everything)'
        result: the data for the requested kind
      -
        description: create a new kind
        path: ''
        method: 'post'
        params:
          -
            name: kind
            type: object
            required: true
            description: the information to create the kind from
            values:
              name: 'the name of the kind (required)'
              plural_name: 'the plural name of the kind (required)'
              description: a description
              tagging: '[boolean] wheter to activate tagging for this kind'
              name_label: the label or the name field
              dating_label: |
                the (default) label for new datings added to entities of this
                kind
              distinct_name_label: the label for the distinct name
              schema: the schema this kind belongs to
              url: the (schema) url
              abstract: |
                [boolean] whether the kind is abstract and can therefore only be
                used as parent for other kinds
              parent_ids: '[integers] a list of parent kind ids'
              child_ids: '[integers] a list of child kind ids'
      -
        description: update a new kind
        path: '/:id'
        method: 'patch, put'
        params:
          -
            name: kind
            type: object
            required: true
            description: the information to update the kind with
            values:
              name: 'the name of the kind (required)'
              plural_name: 'the plural name of the kind (required)'
              description: a description
              tagging: '[boolean] wheter to activate tagging for this kind'
              name_label: the label or the name field
              dating_label: |
                the (default) label for new datings added to entities of this
                kind
              distinct_name_label: the label for the distinct name
              schema: the schema this kind belongs to
              url: the (schema) url
              abstract: |
                [boolean] whether the kind is abstract and can therefore only be
                used as parent for other kinds
              parent_ids: '[integers] a list of parent kind ids'
              child_ids: '[integers] a list of child kind ids'
      -
        description: remove (soft-delete) a kind
        path: ':id'
        method: 'delete'
        params:
          - 
            name: id
            type: integer
            required: true
            description: the id of the kind to remove
            

  -
    description: work with relations
    path: '/relations'
    authentication: |
      no object level restrictions, read access is public, write access requires
      special user permissions
    endpoints:
      -
        description: retrieve a list of relations
        path: ''
        params: {}
        result: a paginated result containing matching relations
      -
        description: list relation names for a given combination of kinds
        path: '/names'
        params:
          - 
            name: from_kind_ids
            type: integers
            description: a list with ids of kinds
          -
            name: to_kind_ids
            type: integers
            description: a list with ids of kinds
        result: the list of relation names
      -
        description: show information about a single relation
        path: '/:id'
        params:
          - 
            name: id
            type: integer
            required: true
            description: the id the relation to retrieve
          -
            name: include
            type: strings
            description: list of information aspects on the relation to include
            values:
              - 'technical (uuid, timestamps)'
              - 'inheritance (parent relation(s))'
              - 'all (include everything)'
        result: the data for the requested relation
      -
        description: create a new relation
        path: ''
        method: 'post'
        params:
          -
            name: kind
            type: object
            required: true
            description: the information to create the relation from
            values:
              name: 'the name of the relation (required)'
              reverse_name: 'the reverse name of the relation (required)'
              description: a description
              from_kind_id: 
              to_kind_id: 
              abstract: |
                [boolean] whether the relation is abstract and can therefore
                only be used as parent for other relations
              schema: the schema this kind belongs to
              url: the (schema) url
              identifier: a identifier (e.g. wikipedia property id)
              reverse_identifier: |
                the identifier for a reverse relation (e.g. wikipedia property
                id)
      -
        description: update a new relation
        path: '/:id'
        method: 'patch, put'
        params:
          -
            name: kind
            type: object
            required: true
            description: the information to create the relation from
            values:
              name: 'the name of the relation (required)'
              reverse_name: 'the reverse name of the relation (required)'
              description: a description
              from_kind_id: |
                relationships can only start from entities with this kind
              to_kind_id: |
                relationships can only end at entities with this kind
              abstract: |
                [boolean] whether the relation is abstract and can therefore
                only be used as parent for other relations
              schema: the schema this kind belongs to
              url: the (schema) url
              identifier: a identifier (e.g. wikipedia property id)
              reverse_identifier: |
                the identifier for a reverse relation (e.g. wikipedia property
                id)
      -
        description: remove (soft-delete) a relation
        path: ':id'
        method: 'delete'
        params:
          - 
            name: id
            type: integer
            required: true
            description: the id of the relation to remove
            